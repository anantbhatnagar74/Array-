// Two Sum Calculation using Brute Force Approach or Hash Table.
// Return the indices of the array that sum up to target value.

import java.util.*;
public class TwoSum
{
    public static void main(String args[])
    {
        int [] arr = {11,3,7,9,14,2};
        int target =17;
        int [] ans = new int [2];
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i=0;i< arr.length; i++)
        {
            int sno = target - arr[i];
            if(map.containsKey(sno))
            {
                ans[0] = map.get(sno);
                ans[1] = i;
                break;
          
            }
            map.put(arr[i], i);
        }
        System.out.println(ans[0] + " " + ans[1]);
    }
}

Output : 1 4


// Given an array & a 'target'. You need to find all the triplets (a[i],a[j],a[k]) such that there sum a[i]+a[j]+a[k] = target & i!=j!=k.
// Note : The solution must contain Unique Triplets.

import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        int [] arr = {7,-6,3,8,-1,8,-11};
        int target =  0;
        solution(arr, target, arr.length);
    }
    public static void solution(int [] a, int target, int n)
    {
        Arrays.sort(a);
        for(int i=0; i<n; i++)
        {
            if(i==0||a[i]!=a[i-1])
            {
                int j=i+1, k=n-1;
                int tar = target - a[i];
                while(j<k)
                {
                    if(a[j]+a[k]==tar)
                    {
                        System.out.println(a[i]+ " "+ a[j]+ " "+ a[k]);
                        // Ignoring the duplicates.
                        while(j<k & a[j] == a[j+1]) j++;
                        while(j<k & a[k] == a[k-1]) k--;
                        j++;
                        k--;
                    }
                    else if(a[j]+a[k]<tar)
                    {
                        j++;
                    }
                    else
                    {
                        k--;
                    }
                }
            }
        }
    }
}

Output : -11 3 8
         -6 -1 7


// Take an input N from the user & return the smallest number whose product of digits is N.

import java.util.*;
class Main
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.println(solution(n));
    }
    public static int solution(int n)
    {
        String ans = "";
        for(int div=9; div>=2; div--)
        {
            while(n % div == 0)
            {
                n = n/div;
                ans = div + ans;
            }
        }
        if(n!=1)
        {
            return -1;
        }
        else 
        {
            return Integer.parseInt(ans);
        }
    }
}


Output : 81000
         555899

